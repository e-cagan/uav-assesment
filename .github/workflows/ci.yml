name: UAV Assessment CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

env:
  DOCKER_IMAGE: uav-assessment-env:ci

jobs:
  sim-tests:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Set up Buildx (container driver)
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container
          buildkitd-flags: --debug

      - name: üê≥ Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.DOCKER_IMAGE }}
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üîß Make scripts executable
        run: chmod +x run_sitl.sh

      # ---------- TASK 1 ----------
      - name: üöÄ Run Task 1 ‚Äì Arm/Disarm
        id: task1
        continue-on-error: true
        run: |
          mkdir -p .ci_artifacts
          docker run --rm -t -e FORCE_RUN=1 -v "$PWD":/ws -w /ws ${{ env.DOCKER_IMAGE }} bash -lc '
            set -e
            colcon build --symlink-install --packages-select candidate_package test_package
            source install/setup.bash
            ./run_sitl.sh
            rc=0
            python3 -m pytest -c src/test_package/setup.cfg -k test_task_1_arm_disarm -s -vv src/test_package/test --junit-xml build/test_package/pytest_task1.xml || rc=$?
            mkdir -p /ws/.ci_artifacts
            cp /tmp/sitl.log /ws/.ci_artifacts/task1_sitl.log || true
            cp build/test_package/pytest_task1.xml /ws/.ci_artifacts/pytest_task1.xml || true
            exit $rc
          '

      # ---------- TASK 2 ----------
      - name: üõ´ Run Task 2 ‚Äì Takeoff/Land
        id: task2
        continue-on-error: true
        run: |
          docker run --rm -t -e FORCE_RUN=1 -v "$PWD":/ws -w /ws ${{ env.DOCKER_IMAGE }} bash -lc '
            set -e
            colcon build --symlink-install --packages-select candidate_package test_package
            source install/setup.bash
            ./run_sitl.sh
            rc=0
            python3 -m pytest -c src/test_package/setup.cfg -k test_task_2_takeoff_land -s -vv src/test_package/test --junit-xml build/test_package/pytest_task2.xml || rc=$?
            mkdir -p /ws/.ci_artifacts
            cp /tmp/sitl.log /ws/.ci_artifacts/task2_sitl.log || true
            cp build/test_package/pytest_task2.xml /ws/.ci_artifacts/pytest_task2.xml || true
            exit $rc
          '

      - name: üìé Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: .ci_artifacts

      - name: üìù Summary
        if: always()
        run: |
          echo "## üõ©Ô∏è UAV Assessment Results" >> "$GITHUB_STEP_SUMMARY"
          echo >> "$GITHUB_STEP_SUMMARY"
          echo "- Task 1 (Arm/Disarm): **${{ steps.task1.outcome }}**" >> "$GITHUB_STEP_SUMMARY"
          echo "- Task 2 (Takeoff/Land): **${{ steps.task2.outcome }}**" >> "$GITHUB_STEP_SUMMARY"
          echo >> "$GITHUB_STEP_SUMMARY"
          echo "### Task 1 ‚Äì SITL log (tail)" >> "$GITHUB_STEP_SUMMARY"
          [ -f .ci_artifacts/task1_sitl.log ] && tail -n 40 .ci_artifacts/task1_sitl.log >> "$GITHUB_STEP_SUMMARY" || echo "(no log)" >> "$GITHUB_STEP_SUMMARY"
          echo >> "$GITHUB_STEP_SUMMARY"
          echo "### Task 2 ‚Äì SITL log (tail)" >> "$GITHUB_STEP_SUMMARY"
          [ -f .ci_artifacts/task2_sitl.log ] && tail -n 40 .ci_artifacts/task2_sitl.log >> "$GITHUB_STEP_SUMMARY" || echo "(no log)" >> "$GITHUB_STEP_SUMMARY"

      - name: ‚ùå Fail job if any task failed
        if: ${{ always() && (steps.task1.outcome == 'failure' || steps.task2.outcome == 'failure') }}
        run: exit 1
