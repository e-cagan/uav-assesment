name: UAV Assessment CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

env:
  DOCKER_IMAGE: uav-assessment-env:ci

jobs:
  sim-tests:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to:   type=gha,mode=max

      - name: 🔧 Make scripts executable
        run: chmod +x run_sitl.sh

      # ---------- Ortak fonksiyon: container içinde pytest XML'ini değerlendir ----------
      - name: ✍️ Write result-check script
        run: |
          cat > .ci_check.py <<'PY'
          import sys, xml.etree.ElementTree as ET
          p = sys.argv[1]
          root = ET.parse(p).getroot()
          # JUnit biçimi; pytest tüm testler bir suite altında olur genelde
          fails  = sum(1 for _ in root.iter("failure"))
          errors = sum(1 for _ in root.iter("error"))
          # xfail'leri "skipped" olarak yazar; mesajında "xfail" geçer
          xfails = 0
          for s in root.iter("skipped"):
              msg = (s.attrib.get("message","") + (s.text or "")).lower()
              if "xfail" in msg or "expected failure" in msg:
                  xfails += 1
          print(f"xfails={xfails} fails={fails} errors={errors}")
          sys.exit(0 if (fails==0 and errors==0 and xfails==0) else 1)
          PY

      # ---------- TASK 1 ----------
      - name: 🚀 Run Task 1 – Arm/Disarm
        id: task1
        continue-on-error: true
        run: |
          mkdir -p .ci_artifacts
          set +e
          docker run --rm -t \
            -e CI=true \
            -e FORCE_RUN=1 \
            -v "$PWD":/ws -w /ws ${{ env.DOCKER_IMAGE }} bash -lc '
              set -e
              colcon build --symlink-install --packages-select candidate_package test_package
              source install/setup.bash
              ./run_sitl.sh
              # NOT: pytest argümanlarını tek stringte veriyoruz; -k yanlış parse olmasın
              if ! colcon test --packages-select test_package \
                   --event-handlers console_direct+ \
                   --pytest-args "-k test_task_1_arm_disarm -s -vv" ; then
                echo "[task1] colcon test returned non-zero"
              fi
              colcon test-result --verbose || true
              mkdir -p /ws/.ci_artifacts
              cp /tmp/sitl.log /ws/.ci_artifacts/task1_sitl.log || true
              cp build/test_package/pytest.xml /ws/.ci_artifacts/task1_pytest.xml || true
            '
          rc=0
          # XFAIL/FATAL var mı diye XML'e bak
          python3 .ci_check.py .ci_artifacts/task1_pytest.xml || rc=1
          if [ $rc -eq 0 ]; then
            echo "status=PASS" >> $GITHUB_OUTPUT
          else
            echo "status=FAIL" >> $GITHUB_OUTPUT
          fi
          echo "rc=$rc" >> $GITHUB_OUTPUT
          exit 0  # job düşmesin; iki task da raporlansın

      # ---------- TASK 2 ----------
      - name: 🚀 Run Task 2 – Takeoff/Land
        id: task2
        continue-on-error: true
        run: |
          set +e
          docker run --rm -t \
            -e CI=true \
            -e FORCE_RUN=1 \
            -v "$PWD":/ws -w /ws ${{ env.DOCKER_IMAGE }} bash -lc '
              set -e
              colcon build --symlink-install --packages-select candidate_package test_package
              source install/setup.bash
              ./run_sitl.sh
              if ! colcon test --packages-select test_package \
                   --event-handlers console_direct+ \
                   --pytest-args "-k test_task_2_takeoff_land -s -vv" ; then
                echo "[task2] colcon test returned non-zero"
              fi
              colcon test-result --verbose || true
              mkdir -p /ws/.ci_artifacts
              cp /tmp/sitl.log /ws/.ci_artifacts/task2_sitl.log || true
              cp build/test_package/pytest.xml /ws/.ci_artifacts/task2_pytest.xml || true
            '
          rc=0
          python3 .ci_check.py .ci_artifacts/task2_pytest.xml || rc=1
          if [ $rc -eq 0 ]; then
            echo "status=PASS" >> $GITHUB_OUTPUT
          else
            echo "status=FAIL" >> $GITHUB_OUTPUT
          fi
          echo "rc=$rc" >> $GITHUB_OUTPUT
          exit 0

      - name: 📎 Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: .ci_artifacts

      - name: 📝 Summary
        if: always()
        run: |
          {
            echo "## 🛩️ UAV Assessment Results"
            echo
            echo "- Task 1 (Arm/Disarm): **${{ steps.task1.outputs.status }}** (rc=${{ steps.task1.outputs.rc }})"
            echo "- Task 2 (Takeoff/Land): **${{ steps.task2.outputs.status }}** (rc=${{ steps.task2.outputs.rc }})"
            echo
            echo "### Task 1 – SITL log (tail)"
            [ -f .ci_artifacts/task1_sitl.log ] && tail -n 40 .ci_artifacts/task1_sitl.log || echo "(no log)"
            echo
            echo "### Task 2 – SITL log (tail)"
            [ -f .ci_artifacts/task2_sitl.log ] && tail -n 40 .ci_artifacts/task2_sitl.log || echo "(no log)"
          } >> "$GITHUB_STEP_SUMMARY"
