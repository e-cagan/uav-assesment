name: UAV Assessment CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

env:
  DOCKER_IMAGE: uav-assessment-env:ci

jobs:
  sim-tests:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      # Buildx'i container driver ile kur (cache export hatası yaşamamak için)
      - name: 🛠️ Setup Buildx (container driver)
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container
          buildkitd-flags: --debug

      # Docker image'ı cache'li derle ve local'e load et
      - name: 🐳 Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.DOCKER_IMAGE }}
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔧 Make scripts executable
        run: chmod +x run_sitl.sh run_mavros.sh

      # ------------------ MAVROS smoke ------------------
      - name: 🧪 MAVROS smoke
        id: mavros
        continue-on-error: true
        run: |
          docker run --rm -t \
            -v "$PWD":/ws -w /ws ${{ env.DOCKER_IMAGE }} bash -lc '
              set -e
              # ROS ortamını açıkça yükle (ros2: not found hatasına karşı)
              source /opt/ros/humble/setup.bash

              # SITL'i başlat
              ./run_sitl.sh || true

              # MAVROS'u 14557 ile başlat
              ( ./run_mavros.sh 14557 > /tmp/mavros.log 2>&1 & )

              # /mavros/state topiğini 20 sn bekle
              ok=0
              for i in {1..40}; do
                source /opt/ros/humble/setup.bash
                if ros2 topic list 2>/dev/null | grep -q "/mavros/state"; then
                  echo "[OK] MAVROS up"
                  ok=1
                  break
                fi
                sleep 0.5
              done

              # logları dışarı kopyala
              mkdir -p /ws/.ci_artifacts
              cp /tmp/sitl.log   /ws/.ci_artifacts/mavros_sitl.log  2>/dev/null || true
              cp /tmp/mavros.log /ws/.ci_artifacts/mavros.log       2>/dev/null || true

              # durum
              if [ "$ok" -ne 1 ]; then
                echo "[ERR] MAVROS not up"
                exit 1
              fi
            '

      # ------------------ TASK 1 ------------------
      - name: 🚀 Run Task 1 – Arm/Disarm
        id: task1
        continue-on-error: true
        run: |
          docker run --rm -t \
            -e FORCE_RUN=1 \
            -v "$PWD":/ws -w /ws ${{ env.DOCKER_IMAGE }} bash -lc '
              set -e
              source /opt/ros/humble/setup.bash

              colcon build --symlink-install --packages-select candidate_package test_package
              source install/setup.bash
              ./run_sitl.sh || true

              rc=0
              # PyTest'i doğrudan koştur (colcon test ile -k karmaşasını önlüyoruz)
              python3 -m pytest -c src/test_package/setup.cfg \
                -k "test_task_1_arm_disarm" -s -vv src/test_package/test \
                --junit-xml build/test_package/pytest_task1.xml || rc=$?

              mkdir -p /ws/.ci_artifacts
              cp /tmp/sitl.log /ws/.ci_artifacts/task1_sitl.log 2>/dev/null || true
              cp build/test_package/pytest_task1.xml /ws/.ci_artifacts/pytest_task1.xml 2>/dev/null || true
              exit $rc
            '

      # ------------------ TASK 2 ------------------
      - name: 🛫 Run Task 2 – Takeoff/Land
        id: task2
        continue-on-error: true
        run: |
          docker run --rm -t \
            -e FORCE_RUN=1 \
            -v "$PWD":/ws -w /ws ${{ env.DOCKER_IMAGE }} bash -lc '
              set -e
              source /opt/ros/humble/setup.bash

              colcon build --symlink-install --packages-select candidate_package test_package
              source install/setup.bash
              ./run_sitl.sh || true

              rc=0
              python3 -m pytest -c src/test_package/setup.cfg \
                -k "test_task_2_takeoff_land" -s -vv src/test_package/test \
                --junit-xml build/test_package/pytest_task2.xml || rc=$?

              mkdir -p /ws/.ci_artifacts
              cp /tmp/sitl.log /ws/.ci_artifacts/task2_sitl.log 2>/dev/null || true
              cp build/test_package/pytest_task2.xml /ws/.ci_artifacts/pytest_task2.xml 2>/dev/null || true
              exit $rc
            '

      - name: 📎 Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: .ci_artifacts

      - name: 📝 Summary
        if: always()
        run: |
          {
            echo "## 🛩️ UAV Assessment Results"
            echo
            echo "- MAVROS smoke: **${{ steps.mavros.outcome }}**"
            echo "- Task 1 (Arm/Disarm): **${{ steps.task1.outcome }}**"
            echo "- Task 2 (Takeoff/Land): **${{ steps.task2.outcome }}**"
            echo
            echo "### MAVROS log (tail)"
            [ -f .ci_artifacts/mavros.log ] && tail -n 40 .ci_artifacts/mavros.log || echo "(no mavros.log)"
            echo
            echo "### Task 1 – SITL log (tail)"
            [ -f .ci_artifacts/task1_sitl.log ] && tail -n 40 .ci_artifacts/task1_sitl.log || echo "(no task1_sitl.log)"
            echo
            echo "### Task 2 – SITL log (tail)"
            [ -f .ci_artifacts/task2_sitl.log ] && tail -n 40 .ci_artifacts/task2_sitl.log || echo "(no task2_sitl.log)"
          } >> "$GITHUB_STEP_SUMMARY"

      # Herhangi bir adım fail ise job'ı düşür
      - name: ❌ Fail job if any step failed
        if: ${{ always() && (steps.mavros.outcome == 'failure' || steps.task1.outcome == 'failure' || steps.task2.outcome == 'failure') }}
        run: exit 1
